// Star Nest by Pablo Roman Andrioli

// This content is under the MIT License.

#define iterations 10
#define formuparam 0.73

#define volsteps 5
#define stepsize 0.3

//#define zoom   0.800
#define tile   0.850
#define speed  0.02

#define brightness 0.0030
#define darkmatter 0.300
//#define distfading 0.830
#define saturation 0.850

uniform float zoom;
uniform float distfading;


void mainImage( out vec4 fragColor, in vec2 fragCoord)
{
	//get coords and direction
	vec2 uv=fragCoord.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);
	float time=iTime*speed+.25;

	vec3 from=vec3(1.,.5,0.5);
	from+=vec3(time*2.,time,-2.);
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		float p2, lp;
		for (int i=0; i<iterations; i++) { 
			p2 = dot(p,p);
			lp = sqrt(p2);
			p=abs(p)/p2-formuparam; // the magic formula
			a+=abs(lp-pa); // absolute sum of average change
			pa=lp;
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a*=a*a; // add contrast
		//if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=vec3(dm,dm*.5,0.);
		v+=fade;
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
	v=mix(vec3(length(v)),v,saturation); //color adjust
	fragColor = vec4(v*.01,1.);	
	
}